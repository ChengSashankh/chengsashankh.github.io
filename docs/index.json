[{"content":"\u003ch1 id=\"cs3216-learning-outcomes\"\u003eCS3216 Learning Outcomes\u003c/h1\u003e\n\u003cp\u003eIn the Fall of 2019, I took a truly transformational class \u003ca href=\"https://cs3216.com/\"\u003eCS3216\u003c/a\u003e at the National University of Singapore. The class is no ordinary class - it asks more of you, and gives more to you. At the end of the class, I wrote out the following reflection of my learnings from the class, and I decided to re-produce it here because these are learnings that serve me well to this day!\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThis is a long post, so here is a tl;dr. These are some of the things I learnt in CS3216:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRaise the bar and push yourself\u003c/li\u003e\n\u003cli\u003ePeople need to take responsibility and own their tasks - take pride in your work\u003c/li\u003e\n\u003cli\u003eMake decisions in time\u003c/li\u003e\n\u003cli\u003eKeep the big picture in perspective\u003c/li\u003e\n\u003cli\u003eTake positive and negative feedback in the right stride\u003c/li\u003e\n\u003cli\u003eDocument your progress\u003c/li\u003e\n\u003cli\u003eLearn to be flexible\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo, what DID I learn in CS3216? I’m not sure where to start. This has been a crazy journey with plenty of disappointment, pondering, complaining and satisfaction - and there was time for each in just 12 weeks of perpetual deadline dash.\u003c/p\u003e\n\u003cp\u003eBy the numbers, it has been a very busy semester:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e3 different teams to work with (in my case)\u003c/li\u003e\n\u003cli\u003e4 different assignments\u003c/li\u003e\n\u003cli\u003e2 presentations\u003c/li\u003e\n\u003cli\u003eProduct pitches\u003c/li\u003e\n\u003cli\u003euser testing\u003c/li\u003e\n\u003cli\u003ethirteen writing assignments\u003c/li\u003e\n\u003cli\u003ethree consultations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis is more than any module in NUS has asked of me, and while I’m pretty sure my other mods have taken a good beating, this is as much as any module in NUS has taught me.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHindsight is 20/20, and so it’s probably the best way to learn some lessons.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI learnt to be a better developer, I learnt how to work with different styles of teammates and push as hard as possible, but my key learning points have been the finer things in here:\u003c/p\u003e\n\u003ch3 id=\"forget-the-requirements\"\u003eForget the requirements\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003eEvery project in university begins with looking at what the course requirements are. Prudent as that may be, this is a major way I’ve held myself back, instead pushing to make my work that much better. Working on projects by just trying to keep pushing forward with improvements is the only way you’ll push the boundaries of what you know, and learn something new. \n\nSo sometimes, it’s best to set your bar higher than you’re required to.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"responsibility-is-a-necessary-teammate\"\u003eResponsibility is a necessary teammate\u003c/h3\u003e\n\u003cp\u003ePeople often think that finding the most skilled developers, designers (and whoever else you project needs) is the most important thing. Past a basic threshold of skill, those who take responsibility for their part in the project are always the better teammates. When the going gets tough, if people don’t take responsibility for their parts, it either piles up on the others, or is completely lost in the team. Either way, it’s not easy to tide the difficult times.\u003c/p\u003e\n\u003cp\u003ePeople who take pride and responsibility in their work contribute to a better team environment.\u003c/p\u003e\n\u003ch3 id=\"decisions-decisions-decisions\"\u003eDecisions, decisions, decisions\u003c/h3\u003e\n\u003cp\u003eMaking the right decisions is not just about knowing the right things. It’s about actually pushing through to make sure that decisions don’t hang about longer than they have to, and that they are made by the right people.\u003c/p\u003e\n\u003cp\u003eStarting to feel that the stack is going to constrain you? Worrying that you’re deviating too far from the main course? Are you having growing concerns about code quality?\u003c/p\u003e\n\u003cp\u003eSometimes, nobody wants to be the one to make a decision. If you discuss the same topic over and over, it gets more and more stale, and it becomes the status quo to leave a meeting without resolving issues. Bringing up the right issues isn’t enough. You need to see it through to the end and ensure that the decision is made.\u003c/p\u003e\n\u003ch3 id=\"big-picture-vs-details---dont-lose-perspective\"\u003eBig picture vs Details - Don’t lose perspective\u003c/h3\u003e\n\u003cp\u003eOne of the major takeaways from the consultations we had with Prof Ben during the final project was that we regained some perspective of the “big picture”. It’s easy to be convinced that an idea is good, and get lost in the details before you’ve done your due diligence regarding validating an idea.\u003c/p\u003e\n\u003cp\u003eAlways have a sounding board, and don’t dismiss their opinions as uninformed. After all, you’re building the app for a user base, not just yourself.\u003c/p\u003e\n\u003ch3 id=\"taking-feedback-the-right-way\"\u003eTaking feedback the right way\u003c/h3\u003e\n\u003cp\u003eOne of the best things about CS3216 for me was how tight the feedback loop was. Every submission, assignment and task had some sort of feedback loop, and I actually found that to be quite useful.\u003c/p\u003e\n\u003cp\u003eWe got plenty of feedback on our work - sometimes positive, sometimes negative. Taking this feedback the right way was an important lesson I learnt. Trying to take the negative comments as challenges to overcome, and thinking of them as personal milestones worked quite well for me. Getting recognition for both good and bad work from the Prof gave me drive to try harder.\u003c/p\u003e\n\u003ch3 id=\"document-your-process\"\u003eDocument your process\u003c/h3\u003e\n\u003cp\u003eIn the absence of accountability, processes break down. If you don’t have a backlog you regularly look at, or an audit trail of what decisions were made when, things will eventually devolve into a lot of confusion.\u003c/p\u003e\n\u003cp\u003eEvery meeting should have minutes.\u003c/p\u003e\n\u003ch3 id=\"learning-to-be-flexible\"\u003eLearning to be flexible\u003c/h3\u003e\n\u003cp\u003eHaving a balanced team is important, you need some developers, some designers and someone to be a manager. But sometimes, when people don’t naturally assume these roles, try to take the initiative, and assume the role the team needs the most. You may not already have the skills you need for that role, but the onus is on you to discuss that.\u003c/p\u003e\n\u003cp\u003eIf your team needs a better (manager/devops/PM), then you should try to become that person.\u003c/p\u003e\n\u003cp\u003eWorking with the people in this module has given me so many good opportunities to learn. Thanks to everyone who helped me learn in this course and best of luck to you guys with the rest of your mods!\u003c/p\u003e\n\u003cp\u003eThanks Prof Ben for the great speakers, the inputs, and the continuous feedback you have given us throughout this module.\u003c/p\u003e\n","description":"","image":null,"permalink":"https://hugo-profile.netlify.app/blogs/cs3216_final/","title":"Reflection - Launching a start-up"},{"content":"\u003cp\u003eThe subject of Crytography has always been the subject of much media speculation and public interest, and has suffered the degree of distortion guaranteed of such topics. To an uninformed reader, it may appear that any meaningful understanding of Cryptography requires a strong mathematical background. While this is certainly true of those aspiring to work with such systems, some valuable insights and ideas are conveyed well regardless of mathematical training.\u003c/p\u003e\n\u003ch2 id=\"what-is-the-problem\"\u003eWhat is the problem?\u003c/h2\u003e\n\u003cp\u003eWe begin by characterising the problem that motivates some well known Cryptographic protocols. Suppose that two individuals Alice and Bob wish to communicate with each other through some medium (letters, perhaps), on some important matters. The problem arises that this communication could be attacked a malicious party, who decides to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espy on the communication, hence compromising the \u003cstrong\u003econfidentiality\u003c/strong\u003e of the conversation\u003c/li\u003e\n\u003cli\u003eforge messages in the communication, hence compromising the \u003cstrong\u003eauthenticity\u003c/strong\u003e of messages\u003c/li\u003e\n\u003cli\u003eseize all letters from the mailbox and preventing their delivery, hence compromising the \u003cstrong\u003eavailability\u003c/strong\u003e of a communication system\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is easy to see that parties with truly malicious intent could cause damage by interfering in private communications such as those between a client and a bank, for example. Cryptography focuses on the former two of these problems; there is not much meaning to exploring any communication system when messages are arbitrarily stolen.\u003c/p\u003e\n\u003ch2 id=\"protecting-message-privacy\"\u003eProtecting message privacy\u003c/h2\u003e\n\u003cp\u003eWe now set about the task of exploring systems that satisfy these requirements, step by step. As a first step we attempt to find a way to protect the confidentiality over the message. Suppose that Alice wishes to share with Bob a message \u003ccode\u003em = \u0026quot;Hello Bob\u0026quot;\u003c/code\u003e. Sharing this message in its current form, would of course allow any eavesdropper gain the complete meaning of the message.\u003c/p\u003e\n\u003cp\u003eHowever, suppose that we applied some transformation (called encryption) upon this message m, which resulted in some other seemingly unrelated string,(perhaps \u003ccode\u003eand1c3de5jd\u003c/code\u003e or any other string you can write down) and only shared this over the communication system. Unless the eavesdropper had knowledge of the exact way in which this transformation was applied, he/she has no way of recovering the message m, and hence is not aware that the message exchanged was indeed \u003ccode\u003eHello Bob\u003c/code\u003e. If Bob knows a method to transform the secret message back to its original form (called decryption), then in a very primitive sense, this system allows Alice and Bob to communicate without anyone eavesdropping on the conversation. Anyone may acquire the encrypted string, but only Alice and Bob are able to derive the actual meaning from them.\u003c/p\u003e\n\u003cp\u003eIn order for this to be useful, we require that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAlice and Bob agree on an encryption and decryption method.\u003c/li\u003e\n\u003cli\u003eno one else knows of these methods.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn real life, it is neither possible nor desirable that every pair of communicating parties agree on a new and secret method of communication. Instead we consider an alternate approach where Alice and Bob agree on a secret password (called a secret key) before hand. We modify the above system such that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eone can only decrypt a message if the key with which it was encrypted is known.\u003c/li\u003e\n\u003cli\u003eall communicating parties use the same encryption and decryption method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis is analogous in some sense to the way we generally log into our email accounts. That a username and password are to be typed in are common knowledge, however only your specific password unlocks your account. In other words, the \u003cstrong\u003eprotocol\u003c/strong\u003e, or process to unlock an account is publicly known and common to everyone, yet impossible without your secret key.\u003c/p\u003e\n\u003cp\u003eSo Alice and Bob now agree on a secret key beforehand, and choose a publicly known encryption and decryption method. When Alice sends \u003ccode\u003eHello Bob\u003c/code\u003e, she encrypts it with the function and that specific secret key. Bob then uses the same secret key to decrypt the message. The eavesdropper obtains the encrypted message, and knows the method to decrypt a message in general, but is unable to do so without the secret key.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Figure_1.png\" alt=\"Figure 1: Encryption and Decryption\"\u003e\u003c/p\u003e\n\u003cp\u003eThis is one simple way Alice and Bob can encrypt their messages to keep them secret from eavesdroppers. This systems seems to work, provided that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAlice and Bob have agreed on a secret key beforehand, and nobody else knows of this key.\u003c/li\u003e\n\u003cli\u003ewe know of suitable encryption and decryption functions.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe system suggested above certainly still is not without issues. If a third party guesses the key correctly, then he/she will be able to read all the messages. It must hence be hard to guess the key. Alice and Bob will also need some way to secretly agree on such a key. Without this, this method will not work at all. Additionally, it provides Bob with no way to verify that Alice indeed sent the messages, and not someone else.\u003c/p\u003e\n\u003cp\u003eThe system discussed above is called \u003cstrong\u003esymmetric encryption\u003c/strong\u003e, since encryption and decryption both \u003cem\u003esymmetrically\u003c/em\u003e use the same secret key. There are other methods where different keys are used.\u003c/p\u003e\n\u003cp\u003eIn future articles, we will discuss other methods that improve on the security of this scheme.\u003c/p\u003e\n","description":"","image":null,"permalink":"https://hugo-profile.netlify.app/blogs/encryption/","title":"Intro to Encryption"},{"content":"\u003ch1 id=\"cs3216-what-i-will-learn\"\u003eCS3216: What I will learn\u003c/h1\u003e\n\u003cp\u003eIn the Fall of 2019, I took a truly transformational class \u003ca href=\"https://cs3216.com/\"\u003eCS3216\u003c/a\u003e at the National University of Singapore. The class is no ordinary class - it asks more of you, and gives more to you. At the start of the class, we were all asked to quickly write out our learning objectives in a written assignment. Though its raw and simple, I have reproduced that in the blog below.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eOne idea that has stuck with me is that ordinary people can do extraordinary things (Elon Musk). In essence, it captures the idea that any ceiling we define for our own abilities will only serve to limit us, and the only true way to keep improving is to always increase \u0026ldquo;the ask\u0026rdquo; from ourselves. This is the mindset I bring into CSS3216. My learning objectives from the course are hence of two streams.\u003c/p\u003e\n\u003ch2 id=\"developing-a-software-product-and-working-through-the-long-path-from-ideation-to-solution\"\u003eDeveloping a software product and working through the (long) path from ideation to solution.\u003c/h2\u003e\n\u003cp\u003eI am interested in learning about and experiencing the process of identifying a problem statement, and understanding some defining traits of a good product. I hope to be a resourceful teammate who can quickly adapt to different teams and projects, and contribute to the effort by hitting the ground running. Alongside, I would like to leap out of my comfort zone (in terms of tech stack or role within the team) and learn to contribute in roles that I currently do not feel confident in. After all, in a world as dynamic as software product development, there is no skill we can wave away as unnecessary.\u003c/p\u003e\n\u003cp\u003eThrough this process, I would also like to engage in peer learning. During the networking activity in the first lecture, I discovered several (future) teammates who have skills I would like to pick up (design, UX, etc.) and I would like to actually learn some tangible skills from them. To me, it appears that the problem statements of the assignments are opportunities to help with me learn from my peers. Finally, and most obviously, I would like to gain experience building quick prototypes that have the ability to showcase the impact of an idea.\u003c/p\u003e\n\u003ch2 id=\"embark-on-a-truly-involved-thought-journey-on-the-traits-of-highly-motivated-people-and-discover-the-limits-of-my-abilities\"\u003eEmbark on a truly involved thought journey on the traits of highly motivated people and discover the limits of my abilities.\u003c/h2\u003e\n\u003cp\u003e“The Last Lecture” was truly an incredible way to begin this journey, and I found myself inspired to think more about this stream of learning objectives. I am entering CS3216 with intent to push myself further and learn several things from this process. It is my previous experience that every hard learning experience teaches me some valuable lessons about how to learn better in the future, and they have served me well in every part of life. At the end of this module, I hope to emerge with a more refined process of learning, and valuable insights on how I can improve my work style. I want to teach myself to not be satisfied with a project, and go through with that extra iteration (or perhaps ten) that will help me improve even more.\u003c/p\u003e\n\u003cp\u003eI am sure my learning goals in CS3216 will evolve over the semester owing to the diversity of class, and the varied nature of the tasks. I look forward to the experiences, and of course \u0026ldquo;staying hungry and staying foolish\u0026rdquo;.\u003c/p\u003e\n","description":"","image":null,"permalink":"https://hugo-profile.netlify.app/blogs/cs3216_initial/","title":"Reflection - Heading into CS3216"},{"content":"\u003ch1 id=\"creating-a-shared-secret\"\u003eCreating a Shared Secret\u003c/h1\u003e\n\u003cp\u003eIn the previous section, we discussed the benefits of encrypting communications for the benefit of privacy. While this might seem sufficiently secure at a first glance, we will see that the practicalities of the real world demand the specification of a number of other schemes and processes in order to enable this encryption.\u003c/p\u003e\n\u003cp\u003eFor example, the scheme discussed above (referred to as \u003cstrong\u003esymmetric encryption\u003c/strong\u003e) require Alice and Bob to share a secret key that no other party is aware of. It is unclear so far as to how such a secret may be generated in the event that the parties cannot agree beforehand on such schemes through some other means. In this section, we discuss this problem further, and open a broader discussion on the practicalities of symmetric encryption.\u003c/p\u003e\n\u003ch2 id=\"motivation\"\u003eMotivation\u003c/h2\u003e\n\u003cp\u003eLet us begin again by characterizing the problem that motivates this discussion. Suppose that Alice and Bob are in different parts of the world, and wish to communicate without anyone else eavesdropping on their communications. Recall from the previous section that they can use symmetric encryption to do so, provided they somehow agree upon a secret key without others realizing this key. This requires that they first negotiate a secret key, before communicating. The problem now distills to the following:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGiven that a third party can listen in on all possible communications between Alice and Bob, how can they agree upon a common secret that others do not know about?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn the context of the internet, it is possible that Alice and Bob have never met before (Alice could be a server in different country). It is hence not possible, or practical to rely on shared secret information to create a key. We must create a secret in plain sight.\u003c/p\u003e\n\u003ch2 id=\"approach\"\u003eApproach\u003c/h2\u003e\n\u003cp\u003eThe following is a brief description of the approach. Please note that this section compromises some mathematical accuracies in the interest of simplicity.\u003c/p\u003e\n\u003cp\u003eIn 1976, researchers proposed the Diffie-Hellman protocol to address this problem. The approach to solving this problem begins in a seemingly disconnected mathematical property of numbers: \u003ccode\u003ethat under some conditions, it is easy to calculate the exponents of numbers, but  much harder to reverse this process\u003c/code\u003e. This means that in certain groups,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecalculating g\u003csup\u003ex\u003c/sup\u003e given \u003ccode\u003eg\u003c/code\u003e and \u003ccode\u003ex\u003c/code\u003e is a simple problem, and,\u003c/li\u003e\n\u003cli\u003ecalculating \u003ccode\u003ex\u003c/code\u003e given \u003ccode\u003eg\u003c/code\u003e and g\u003csup\u003ex\u003c/sup\u003e is a much harder problem\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e(ignore the semantics of the mathematical structure \u003ccode\u003eGroup\u003c/code\u003e if it is not relevant to you)\u003c/p\u003e\n\u003cp\u003eIt can now be seen how this mathematical property can be used to create a shared secret. Observe the following interaction. In this discussion, Alice and Bob are attempting to negotiate a secret key and Eve is attempting to listen in on the conversation and steal the key:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAlice randomly selects a number \u003ccode\u003ex\u003c/code\u003e and calculates g\u003csup\u003ex\u003c/sup\u003e. As we discussed before, this can be achieved easily since it is efficiently calculable. She tells Bob, \u0026ldquo;Hi, I\u0026rsquo;d like to chat and here are two numbers g\u003csup\u003ex\u003c/sup\u003e and g.\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eEve can hear this, and she writes down both g and g\u003csup\u003ex\u003c/sup\u003e\u003c/li\u003e\n\u003cli\u003eBob notes down the same details. He now samples a random number y, and similarly calculates g\u003csup\u003ey\u003c/sup\u003e. He tells Alice, \u0026ldquo;Hi, here are my two numbers g and g\u003csup\u003e\u003c/sup\u003e\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eEve notes these down as well\u003c/li\u003e\n\u003cli\u003eAlice receives this and notes down as well.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAt this point, each party has the following details:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAlice: x, g, g\u003csup\u003ex\u003c/sup\u003e and g\u003csup\u003ey\u003c/sup\u003e\u003c/li\u003e\n\u003cli\u003eBob: y, g, g\u003csup\u003ey\u003c/sup\u003e and g\u003csup\u003ex\u003c/sup\u003e\u003c/li\u003e\n\u003cli\u003eEve: g, g\u003csup\u003ex\u003c/sup\u003e and g\u003csup\u003ey\u003c/sup\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSuppose they each attempt to calculate g\u003csup\u003exy\u003c/sup\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAlice can raise g\u003csup\u003ey\u003c/sup\u003e to the power x and obtain g\u003csup\u003exy\u003c/sup\u003e\u003c/li\u003e\n\u003cli\u003eBob can raise g\u003csup\u003ex\u003c/sup\u003e to the power y and obtain g\u003csup\u003eyx\u003c/sup\u003e, which is the same as g\u003csup\u003exy\u003c/sup\u003e\u003c/li\u003e\n\u003cli\u003eEven cannot calculate g\u003csup\u003exy\u003c/sup\u003e directly, without first calculating either x or y. As we discussed earlier, the problem of obtaining x or y from g\u003csup\u003ex\u003c/sup\u003e or g\u003csup\u003ey\u003c/sup\u003e respectively is considered very hard if the suitable g is chosen.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHence, Alice and Bob can generate a shared secret key in plain sight. Remember, these properties are not true of all numbers. They are exclusively true of some mathematical groups, and a further discussion on this would be non-trivial.\u003c/p\u003e\n\u003cp\u003eThe above protocol allows use to now see completely how two unrelated parties can communicate a shared secret key in the presence of malicious actors. They first employ this key-exchange protocol to obtain the shared secret key g\u003csup\u003exy\u003c/sup\u003e and then proceed to use that to symmetrically encrypt all communications.\u003c/p\u003e\n\u003cp\u003eThe practicality of symmetric encryption is now vastly extended. It can be possible for two parties who have never met before, to communicate confidentially without having to share any secrets beforehand. This brings the simplicity of symmetric encryption to use in the era of the internet.\u003c/p\u003e\n\u003cp\u003eEven with this protocol, a multitude of issues remain unresolved and un-discussed. We will further our discussion of secure communication in later posts.\u003c/p\u003e\n","description":"","image":null,"permalink":"https://hugo-profile.netlify.app/blogs/public_key/","title":"Key Exchange"}]